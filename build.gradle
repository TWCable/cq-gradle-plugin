allprojects {
    ext.compatibilityVersion = '1.7'

    apply plugin: 'idea'
    apply plugin: 'eclipse'
    apply plugin: 'maven'
}

apply from: "$rootDir/gradle/idea.gradle"

subprojects {
    apply plugin: 'groovy'
    sourceCompatibility = compatibilityVersion
    targetCompatibility = compatibilityVersion

    apply from: "$rootDir/gradle/publishing.gradle"
    apply from: "$rootDir/gradle/integration-test.gradle"
    apply from: "$rootDir/gradle/additional-artifacts.gradle"
    apply from: "$rootDir/gradle/documentation.gradle"
    apply from: "$rootDir/gradle/release.gradle"

    repositories {
        jcenter()

        // needed for XMLUnit 2
        maven {
            url "https://oss.sonatype.org/content/repositories/snapshots"
        }
    }

    //noinspection GroovyAssignabilityCheck
    dependencies {
        testCompile "org.spockframework:spock-core:1.0-groovy-2.3", {
            exclude group: 'org.codehaus.groovy', module: 'groovy-all'
            exclude group: 'org.hamcrest', module: 'hamcrest-core'
        }
    }

    publish.dependsOn 'publishGhPages', 'bintrayUpload'
}

version = new Version(version as String)

//archivesBaseName = 'cq-gradle-plugins'

// **************************************************************************
//
// BINTRAY SUPPORT
//
// **************************************************************************

//gradle.taskGraph.whenReady { taskGraph ->
//    if (taskGraph.hasTask(bintrayUpload)) {
//        if (!project.hasProperty('bintray.user') || !project.hasProperty('bintray.key')) {
//            throw new IllegalArgumentException((String)"Please define 'bintray.user' and " +
//                "'bintray.key' properties. (Such as in ~/.gradle/gradle.properties)")
//        }
//    }
//}

//bintray {
//    user = project.properties['bintray.user']
//    key = project.properties['bintray.key']
//    configurations = ['archives']
//
//    publish = version.status == 'release'
//
//    pkg {
//        userOrg = 'twcable'
//        repo = 'aem'
//        name = project.name
//
//        desc = 'A number of plugins for making it easier to work with Gradle and Adobe CQ/AEM'
//
//        websiteUrl = 'https://github.com/TWCable/cq-gradle-plugin'
//        issueTrackerUrl = 'https://github.com/TWCable/cq-gradle-plugin/issues'
//        vcsUrl = 'https://github.com/TWCable/cq-gradle-plugin.git'
//        licenses = ['Apache-2.0']
//        labels = ['gradle', 'groovy', 'http']
//        attributes = ['plat': ['gradle', 'aem', 'cq']]
//
//        publicDownloadNumbers = true
//
//        //noinspection GroovyAssignabilityCheck
//        version {
//            //  desc = 'First public release'
//            //noinspection GrReassignedInClosureLocalVar
//            name = project.version.bintrayVersion
//        }
//    }
//}
//
//task sourcesJar(type: Jar, dependsOn: classes) {
//    classifier = 'sources'
//    from sourceSets.main.allSource
//}
//
//artifacts {
//    archives sourcesJar
//}

// **************************************************************************
//
// VERSION CLASS
//
// **************************************************************************

class Version {
    String originalVersion
    String thisVersion
    String status
    Date buildTime


    Version(String versionValue) {
        buildTime = new Date()
        originalVersion = versionValue
        if (originalVersion.endsWith('-SNAPSHOT')) {
            status = 'integration'
            thisVersion = originalVersion - 'SNAPSHOT' + getTimestamp()
        }
        else {
            status = 'release'
            thisVersion = versionValue
        }
    }


    @SuppressWarnings("UnnecessaryQualifiedReference")
    String getTimestamp() {
        // Convert local file timestamp to UTC
        def format = new java.text.SimpleDateFormat('yyyyMMddHHmmss')
        format.setCalendar(Calendar.getInstance(TimeZone.getTimeZone('UTC')));
        return format.format(buildTime)
    }


    String toString() {
        originalVersion
    }


    String getBintrayVersion() {
        thisVersion
    }

}
